import json
import os
import requests
import yaml
from django.core.management.base import BaseCommand
from django.conf import settings
from pathlib import Path


class Command(BaseCommand):
    help = """
    Fetches API schema from drf-spectacular and generates an environment file with all endpoints.

    Example:
    python manage.py generate_api_env --output .env.api --base-url http://127.0.0.1:8000
    """

    def add_arguments(self, parser):
        parser.add_argument(
            "--output",
            type=str,
            default=".env.api",
            help="Output file path for the environment variables (default: .env.api)",
        )
        parser.add_argument(
            "--base-url",
            type=str,
            default="http://127.0.0.1:8000",
            help="Base URL for the API (default: http://127.0.0.1:8000)",
        )

    def handle(self, *args, **options):
        output_file = options["output"]
        base_url = options["base_url"]
        schema_url = f"{base_url}/api/schema/?format=yaml"

        self.stdout.write(f"Fetching API schema from {schema_url}...")

        try:
            response = requests.get(schema_url)
            response.raise_for_status()
            schema = yaml.safe_load(response.text)
        except requests.RequestException as e:
            self.stderr.write(self.style.ERROR(f"Failed to fetch schema: {str(e)}"))
            return
        except yaml.YAMLError as e:
            self.stderr.write(
                self.style.ERROR(f"Failed to parse YAML schema: {str(e)}")
            )
            return

        # Create environment variables for each endpoint
        env_vars = []
        env_vars.append("# API Endpoints Environment Variables")
        env_vars.append("# Generated by Propius")
        env_vars.append("")

        # Add base URL
        env_vars.append(f"API_BASE_URL={base_url}")
        env_vars.append("")

        # Process each path in the schema
        for path, methods in schema.get("paths", {}).items():
            for method, details in methods.items():
                if method.lower() in ["get", "post", "put", "patch", "delete"]:
                    # Create a clean endpoint name, removing {id} parameters
                    clean_path = path.replace("{id}/", "")
                    endpoint_name = clean_path.strip("/").replace("/", "_").upper()

                    if endpoint_name:
                        # Add the endpoint URL without {id}
                        env_vars.append(f"ENDPOINT_{endpoint_name}={clean_path}")
                        env_vars.append("")

        # Write to file
        try:
            with open(output_file, "w") as f:
                f.write("\n".join(env_vars))
            self.stdout.write(
                self.style.SUCCESS(
                    f"Successfully generated API environment file: {output_file}"
                )
            )
        except IOError as e:
            self.stderr.write(
                self.style.ERROR(f"Failed to write environment file: {str(e)}")
            )
            return

        # Print summary
        self.stdout.write(f"Total endpoints processed: {len(schema.get('paths', {}))}")
        self.stdout.write(
            f"Environment file created at: {os.path.abspath(output_file)}"
        )
